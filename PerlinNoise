using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MyPerlin : MonoBehaviour
{
    [SerializeField] int chunkCount; //8
    [SerializeField] int chunkSize; //16
    [SerializeField] float heightScale;//4

    [SerializeField] GameObject block;
    [SerializeField] GameObject stone;
    [SerializeField] GameObject[] ores;
    [SerializeField] GameObject bedrock;

    [Range(0,1)]
    [SerializeField] float oreChance;
    [SerializeField] int stoneBuffer;
    [SerializeField] int oreBuffer;

    [SerializeField] float lowestY;//2

    // Start is called before the first frame update
    void Start()
    {
        Generate();
    }

    void Generate()
    {
        for(int h = 0; h < chunkCount; h++)
        {
            for (int i = 0; i < chunkCount; i++)
            {
                for (int j = 0; j < chunkSize; j++)
                {
                    for (int k = 0; k < chunkSize; k++)
                    {
                        float kdc = k / 16f;
                        float jdc = j / 16f;
                        float perlinInputX = kdc + h;
                        float perlinInputY = jdc + i;
                        float perlinNoise = Mathf.PerlinNoise(perlinInputX, perlinInputY);
                        float heightScaled = perlinNoise * heightScale;
                        float y = Mathf.RoundToInt(heightScaled);
                        Vector3 pos = new((i * chunkSize) + k, y, (h * chunkSize) + j);
                        Instantiate(block, pos, Quaternion.identity);

                        float height = pos.y;
                        for(int l = 0; l < (lowestY + height); l++)
                        {
                            pos.y -= 1;
                            if (pos.y != -lowestY)
                            {
                                int randomBuffer = Random.Range(-1, 2);
                                if(pos.y < 0 - stoneBuffer + randomBuffer)
                                {
                                    randomBuffer = Random.Range(-1, 2);
                                    if (pos.y < 0 - oreBuffer + randomBuffer)
                                    {
                                        if(Random.Range(0f,1f) < oreChance)
                                        {
                                            int oreIndex = Random.Range(0, ores.Length);
                                            Instantiate(ores[oreIndex], pos, Quaternion.identity);
                                        }
                                        else
                                        {
                                            Instantiate(stone, pos, Quaternion.identity);
                                        }
                                    }
                                    else
                                    {
                                        Instantiate(stone, pos, Quaternion.identity);
                                    }
                                }
                                else
                                {
                                    Instantiate(block, pos, Quaternion.identity);
                                }
                            }
                            else
                            {
                                Instantiate(bedrock, pos, Quaternion.identity);
                            }

                        }
                    }
                }
            }
        }
    }
}
