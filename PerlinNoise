using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MyPerlin : MonoBehaviour
{
    [SerializeField] int chunkCount;
    [SerializeField] int chunkSize;
    [SerializeField] float heightScale;
    [Range(0,1)]
    [SerializeField] float randomness;
    [SerializeField] int seed;
    [SerializeField] bool randomSeed;
    [SerializeField] int seedLength;

    [SerializeField] GameObject block;
    [SerializeField] GameObject bedrock;

    [SerializeField] float lowestY;

    // Start is called before the first frame update
    void Start()
    {
        Generate();
        if (randomSeed)
        {
            RandomSeed();
        }
    }

    void RandomSeed()
    {
        int place = 1;
        int randomSeed = 0;
        for(int i = 0; i < seedLength; i++)
        {
            randomSeed += place * Random.Range(0, 10);
            place *= 10;
        }
        seed = randomSeed;
    }

    void Generate()
    {
        for(int h = 0; h < chunkCount; h++)
        {
            for (int i = 0; i < chunkCount; i++)
            {
                for (int j = 0; j < chunkSize; j++)
                {
                    for (int k = 0; k < chunkSize; k++)
                    {
                        float kdc = k / 16f;
                        float jdc = j / 16f;
                        float randomY = Random.Range(-randomness, randomness);
                        float perlinInputX = kdc + seed + h;
                        float perlinInputY = jdc + seed + i;
                        float perlinNoise = Mathf.PerlinNoise(perlinInputX, perlinInputY);
                        float heightScaled = perlinNoise * heightScale;
                        float y = Mathf.RoundToInt(heightScaled + randomY);
                        Vector3 pos = new((i * chunkSize) + k, y, (h * chunkSize) + j);
                        Instantiate(block, pos, Quaternion.identity);

                        float height = pos.y;
                        for(int l = 0; l < (lowestY + height); l++)
                        {
                            pos.y -= 1;
                            if (pos.y != 0)
                            {
                                Instantiate(block, pos, Quaternion.identity);
                            }
                            else
                            {
                                Instantiate(bedrock, pos, Quaternion.identity);
                            }

                        }
                    }
                }
            }
        }
    }
}
